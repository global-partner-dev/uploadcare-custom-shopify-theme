{{ 'section-photo-upload.css' | asset_url | stylesheet_tag }}

<div class="photo-upload-section section-{{ section.id }}-padding gradient color-{{ section.settings.color_scheme }}">
  <div class="page-width">
    <div class="photo-upload-container">
      <div class="photo-upload-header">
        <h2 class="photo-upload-title">{{ section.settings.title | default: 'Upload Your Photos' }}</h2>
        <p class="photo-upload-description">{{ section.settings.description | default: 'Upload exactly 9 photos to create your custom photo magnets' }}</p>
      </div>

      <div class="photo-upload-content">
        <!-- Select Pictures Button -->
        <div class="select-pictures-container">
          <button class="select-pictures-btn" id="select-pictures-btn">
            SELECT PICTURES
          </button>
        </div>
      </div>
    </div>
  </div>
</div>

<!-- Photo Selection Modal -->
<div class="photo-selection-modal" id="photo-selection-modal">
  <div class="modal-overlay"></div>
  <div class="modal-content">
    <div class="modal-header">
      <button class="modal-close" id="modal-close">&times;</button>
    </div>
    
    <div class="modal-body">
      <div class="modal-layout">
        <!-- Left Sidebar - File Sources -->
        <div class="file-sources-sidebar">
          <div class="source-option active" data-source="local">
            <div class="source-icon">üìÅ</div>
            <span>Local Files</span>
          </div>
          <div class="source-option" data-source="google">
            <div class="source-icon">üì∑</div>
            <span>Google Photos</span>
          </div>
          <div class="source-option" data-source="dropbox">
            <div class="source-icon">üì¶</div>
            <span>Dropbox</span>
          </div>
        </div>

        <!-- Center - Upload Area -->
        <div class="upload-area">
          <div class="upload-content">
            <h3 class="upload-title">drag & drop any files</h3>
            <div class="uploadcare-widget-container">
              <link
                rel="stylesheet"
                href="https://cdn.jsdelivr.net/npm/@uploadcare/file-uploader@1/web/uc-file-uploader-regular.min.css"
              >
              <script type="module">
                import * as UC from 'https://cdn.jsdelivr.net/npm/@uploadcare/file-uploader@1/web/uc-file-uploader-regular.min.js';
                UC.defineComponents(UC);
              </script>

              <uc-config
                ctx-name="modal-photo-uploader"
                source-list="local, camera, facebook, gdrive, dropbox, instagram"
                files-view-mode="grid"
                pubkey="c42b2d4efe346e09fc68"
                multiple="true"
                multiple-max="9"
                multiple-min="1"
                crop="1:1"
                preview-step="true"
                tabs="file camera facebook gdrive dropbox instagram"
                secure-signature=""
                secure-expire=""
                system-dialog="true"
                input-accept-types="image/*"
              ></uc-config>

              <uc-file-uploader-regular
                ctx-name="modal-photo-uploader"
                class="uc-light modal-uploader-widget"
              ></uc-file-uploader-regular>

              <uc-upload-ctx-provider ctx-name="modal-photo-uploader"></uc-upload-ctx-provider>
            </div>
          </div>
        </div>

        <!-- Right Sidebar - Selection Preview -->
        <div class="selection-preview-sidebar">
          <div class="preview-header">
            <button class="preview-close" id="preview-close">&times;</button>
            <h4>Selection preview</h4>
            <p>Click pictures to resize or crop</p>
          </div>
          
          <div class="preview-grid" id="preview-grid">
            <!-- Preview thumbnails will be inserted here -->
          </div>
          
          <div class="preview-footer">
            <div class="selection-count">
              <span id="selection-count">Selected 0 of 9</span>
            </div>
            <button class="add-to-cart-btn" id="modal-add-to-cart" disabled>
              ADD TO CART
            </button>
          </div>
        </div>
      </div>
    </div>
  </div>
</div>

<script>
  class PhotoUploadManager {
    constructor() {
      this.uploadedPhotos = [];
      this.maxPhotos = 9;
      this.modalUploader = null;
      this.isModalOpen = false;
      this.init();
    }

    init() {
      this.setupEventListeners();
      this.setupModal();
    }

    setupEventListeners() {
      // Select Pictures button
      const selectPicturesBtn = document.getElementById('select-pictures-btn');
      if (selectPicturesBtn) {
        selectPicturesBtn.addEventListener('click', () => {
          this.openModal();
        });
      }

      // Modal close buttons
      const modalClose = document.getElementById('modal-close');
      const previewClose = document.getElementById('preview-close');
      const modalOverlay = document.querySelector('.modal-overlay');

      if (modalClose) {
        modalClose.addEventListener('click', () => this.closeModal());
      }
      if (previewClose) {
        previewClose.addEventListener('click', () => this.closeModal());
      }
      if (modalOverlay) {
        modalOverlay.addEventListener('click', () => this.closeModal());
      }

      // Source selection
      const sourceOptions = document.querySelectorAll('.source-option');
      sourceOptions.forEach(option => {
        option.addEventListener('click', () => {
          this.selectSource(option);
        });
      });

      // Add to cart button in modal
      const modalAddToCart = document.getElementById('modal-add-to-cart');
      if (modalAddToCart) {
        modalAddToCart.addEventListener('click', () => {
          this.addToCart();
        });
      }

      // Listen for cart updates
      document.addEventListener('cart:updated', () => {
        this.showPostAddModal();
      });
    }

    setupModal() {
      // Wait for UploadCare to load in modal
      this.waitForUploadCare().then(() => {
        this.setupModalUploadCare();
      });
    }

    waitForUploadCare() {
      return new Promise((resolve) => {
        const checkUploadCare = () => {
          if (window.UC && window.UC.defineComponents) {
            resolve();
          } else {
            setTimeout(checkUploadCare, 100);
          }
        };
        checkUploadCare();
      });
    }

    setupModalUploadCare() {
      // Get the modal uploader instance
      this.modalUploader = document.querySelector('.modal-uploader-widget');
      
      if (this.modalUploader) {
        // Listen for file selection
        this.modalUploader.addEventListener('change', (event) => {
          this.handleFileSelection(event.detail);
        });

        // Listen for file upload progress
        this.modalUploader.addEventListener('progress', (event) => {
          this.handleUploadProgress(event.detail);
        });

        // Listen for file upload completion
        this.modalUploader.addEventListener('done', (event) => {
          this.handleUploadComplete(event.detail);
        });
      }
    }

    openModal() {
      const modal = document.getElementById('photo-selection-modal');
      if (modal) {
        modal.style.display = 'flex';
        document.body.style.overflow = 'hidden';
        this.isModalOpen = true;
      }
    }

    closeModal() {
      const modal = document.getElementById('photo-selection-modal');
      if (modal) {
        modal.style.display = 'none';
        document.body.style.overflow = '';
        this.isModalOpen = false;
      }
    }

    selectSource(option) {
      // Remove active class from all options
      document.querySelectorAll('.source-option').forEach(opt => {
        opt.classList.remove('active');
      });
      
      // Add active class to selected option
      option.classList.add('active');
      
      // Here you would implement different source handling
      console.log('Selected source:', option.dataset.source);
    }

    handleFileSelection(files) {
      console.log('Files selected:', files);
      // Reset photos array
      this.uploadedPhotos = [];
      this.updateSelectionCount();
      this.updateModalAddToCartButton();
    }

    handleUploadProgress(progress) {
      console.log('Upload progress:', progress);
    }

    handleUploadComplete(files) {
      console.log('Upload complete:', files);
      
      // Process uploaded files
      files.forEach((file, index) => {
        if (index < this.maxPhotos) {
          this.uploadedPhotos.push({
            id: file.uuid,
            url: file.cdnUrl,
            name: file.name,
            size: file.size
          });
        }
      });

      this.updatePreviewGrid();
      this.updateSelectionCount();
      this.updateModalAddToCartButton();
    }

    updatePreviewGrid() {
      const grid = document.getElementById('preview-grid');
      if (!grid) return;

      // Clear existing content
      grid.innerHTML = '';

      // Add preview thumbnails
      this.uploadedPhotos.forEach((photo, index) => {
        const thumbnail = document.createElement('div');
        thumbnail.className = 'preview-thumbnail';
        thumbnail.innerHTML = `
          <img src="${photo.url}" alt="Photo ${index + 1}" loading="lazy">
          <button class="remove-thumbnail" data-index="${index}">&times;</button>
        `;
        
        // Add remove functionality
        const removeBtn = thumbnail.querySelector('.remove-thumbnail');
        removeBtn.addEventListener('click', (e) => {
          e.stopPropagation();
          this.removePhoto(index);
        });
        
        grid.appendChild(thumbnail);
      });
    }

    removePhoto(index) {
      this.uploadedPhotos.splice(index, 1);
      this.updatePreviewGrid();
      this.updateSelectionCount();
      this.updateModalAddToCartButton();
    }

    updateSelectionCount() {
      const countElement = document.getElementById('selection-count');
      if (countElement) {
        countElement.textContent = `Selected ${this.uploadedPhotos.length} of ${this.maxPhotos}`;
      }
    }

    updateModalAddToCartButton() {
      const addToCartBtn = document.getElementById('modal-add-to-cart');
      const isComplete = this.uploadedPhotos.length === this.maxPhotos;
      
      if (addToCartBtn) {
        addToCartBtn.disabled = !isComplete;
        if (isComplete) {
          addToCartBtn.classList.remove('disabled');
        } else {
          addToCartBtn.classList.add('disabled');
        }
      }
    }

    addToCart() {
      if (this.uploadedPhotos.length === this.maxPhotos) {
        // Here you would implement the actual add to cart logic
        console.log('Adding to cart:', this.uploadedPhotos);
        
        // Close modal after adding to cart
        this.closeModal();
        
        // Update main page add to cart button
        this.updateMainAddToCartButton();
      }
    }

    updateMainAddToCartButton() {
      const addToCartBtn = document.querySelector('.product-form__buttons .btn--primary');
      if (addToCartBtn) {
        addToCartBtn.disabled = false;
        addToCartBtn.textContent = 'Add to Cart';
        addToCartBtn.classList.remove('btn--disabled');
      }
    }

    getUploadedPhotos() {
      return this.uploadedPhotos;
    }

    showPostAddModal() {
      // This will be implemented in the modal section
      console.log('Show post-add modal');
    }
  }

  // Initialize when DOM is ready
  document.addEventListener('DOMContentLoaded', () => {
    window.photoUploadManager = new PhotoUploadManager();
  });
</script>

{% schema %}
{
  "name": "Photo Upload",
  "tag": "section",
  "class": "section",
  "settings": [
    {
      "type": "text",
      "id": "title",
      "label": "Title",
      "default": "Upload Your Photos"
    },
    {
      "type": "textarea",
      "id": "description",
      "label": "Description",
      "default": "Upload exactly 9 photos to create your custom photo magnets"
    },
    {
      "type": "color_scheme",
      "id": "color_scheme",
      "label": "Color scheme",
      "default": "scheme-1"
    },
    {
      "type": "header",
      "content": "Section padding"
    },
    {
      "type": "range",
      "id": "padding_top",
      "min": 0,
      "max": 100,
      "step": 4,
      "unit": "px",
      "label": "Top padding",
      "default": 36
    },
    {
      "type": "range",
      "id": "padding_bottom",
      "min": 0,
      "max": 100,
      "step": 4,
      "unit": "px",
      "label": "Bottom padding",
      "default": 36
    }
  ],
  "presets": [
    {
      "name": "Photo Upload"
    }
  ]
}
{% endschema %}
