{% comment %}
  Renders photo upload section with UploadCare integration.
  Accepts:
  - block: {Object} passing the block information.
  - product: {Object} product object.
  - section_id: {String} id of section to which this snippet belongs.

  Usage:
  {% render 'photo-upload-section', block: block, product: product, section_id: section.id %}
{% endcomment %}

<div class="photo-upload-section section-{{ section_id }}-padding gradient color-{{ block.settings.color_scheme | default: 'scheme-1' }}" {{ block.shopify_attributes }}>
  <div class="page-width">
    <div class="photo-upload-container">
      <div class="photo-upload-header">
        <h2 class="photo-upload-title">{{ block.settings.title | default: 'Upload Your Photos' }}</h2>
        <p class="photo-upload-description">{{ block.settings.description | default: 'Upload exactly 9 photos to create your custom photo magnets' }}</p>
      </div>

      <div class="photo-upload-content">
        <!-- UploadCare Widget -->
        <div class="uploadcare-widget-container">
          <link
            rel="stylesheet"
            href="https://cdn.jsdelivr.net/npm/@uploadcare/file-uploader@1/web/uc-file-uploader-regular.min.css"
          >
          <script type="module">
            import * as UC from 'https://cdn.jsdelivr.net/npm/@uploadcare/file-uploader@1/web/uc-file-uploader-regular.min.js';
            UC.defineComponents(UC);
          </script>

          <uc-config
            ctx-name="photo-uploader-{{ section_id }}"
            source-list="local, camera, facebook, gdrive, dropbox, instagram"
            files-view-mode="grid"
            pubkey="c42b2d4efe346e09fc68"
            multiple="true"
            multiple-max="9"
            multiple-min="9"
            crop="1:1"
            preview-step="true"
            tabs="file camera facebook gdrive dropbox instagram"
            secure-signature=""
            secure-expire=""
            system-dialog="true"
            input-accept-types="image/*"
          ></uc-config>

          <uc-file-uploader-regular
            ctx-name="photo-uploader-{{ section_id }}"
            class="uc-light photo-uploader-widget"
          ></uc-file-uploader-regular>

          <uc-upload-ctx-provider ctx-name="photo-uploader-{{ section_id }}"></uc-upload-ctx-provider>
        </div>

        <!-- 3x3 Preview Grid -->
        <div class="photo-preview-container">
          <div class="photo-preview-header">
            <h3>Photo Preview</h3>
            <p class="photo-count">Selected <span id="photo-count-{{ section_id }}">0</span> of 9</p>
          </div>
          
          <div class="photo-grid" id="photo-grid-{{ section_id }}">
            <!-- 9 empty slots will be generated by JavaScript -->
            {% for i in (1..9) %}
              <div class="photo-slot" data-slot="{{ i }}">
                <div class="photo-placeholder">
                  <span class="slot-number">{{ i }}</span>
                  <span class="upload-icon">+</span>
                </div>
              </div>
            {% endfor %}
          </div>
        </div>

        <!-- Upload Instructions -->
        <div class="upload-instructions">
          <div class="instruction-item">
            <div class="instruction-icon">üì∏</div>
            <div class="instruction-text">
              <h4>Upload Photos</h4>
              <p>Choose from your device, camera, or cloud storage</p>
            </div>
          </div>
          <div class="instruction-item">
            <div class="instruction-icon">‚úÇÔ∏è</div>
            <div class="instruction-text">
              <h4>Crop & Resize</h4>
              <p>Images will be automatically cropped to square format</p>
            </div>
          </div>
          <div class="instruction-item">
            <div class="instruction-icon">üß≤</div>
            <div class="instruction-text">
              <h4>Create Magnets</h4>
              <p>Each photo becomes a custom magnet</p>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>
</div>

<script>
  class PhotoUploadManager {
    constructor(sectionId) {
      this.sectionId = sectionId;
      this.uploadedPhotos = [];
      this.maxPhotos = 9;
      this.uploader = null;
      this.init();
    }

    init() {
      // Wait for UploadCare to load
      this.waitForUploadCare().then(() => {
        this.setupUploadCare();
        this.setupEventListeners();
      });
    }

    waitForUploadCare() {
      return new Promise((resolve) => {
        const checkUploadCare = () => {
          if (window.UC && window.UC.defineComponents) {
            resolve();
          } else {
            setTimeout(checkUploadCare, 100);
          }
        };
        checkUploadCare();
      });
    }

    setupUploadCare() {
      // Get the uploader instance
      this.uploader = document.querySelector(`uc-file-uploader-regular[ctx-name="photo-uploader-${this.sectionId}"]`);
      
      if (this.uploader) {
        // Listen for file selection
        this.uploader.addEventListener('change', (event) => {
          this.handleFileSelection(event.detail);
        });

        // Listen for file upload progress
        this.uploader.addEventListener('progress', (event) => {
          this.handleUploadProgress(event.detail);
        });

        // Listen for file upload completion
        this.uploader.addEventListener('done', (event) => {
          this.handleUploadComplete(event.detail);
        });
      }
    }

    setupEventListeners() {
      // Listen for cart updates
      document.addEventListener('cart:updated', () => {
        this.showPostAddModal();
      });
    }

    handleFileSelection(files) {
      console.log('Files selected:', files);
      // Reset photos array
      this.uploadedPhotos = [];
      this.updatePhotoCount();
      this.updateAddToCartButton();
    }

    handleUploadProgress(progress) {
      console.log('Upload progress:', progress);
    }

    handleUploadComplete(files) {
      console.log('Upload complete:', files);
      
      // Process uploaded files
      files.forEach((file, index) => {
        if (index < this.maxPhotos) {
          this.uploadedPhotos.push({
            id: file.uuid,
            url: file.cdnUrl,
            name: file.name,
            size: file.size
          });
        }
      });

      this.updatePhotoGrid();
      this.updatePhotoCount();
      this.updateAddToCartButton();
    }

    updatePhotoGrid() {
      const grid = document.getElementById(`photo-grid-${this.sectionId}`);
      const slots = grid.querySelectorAll('.photo-slot');

      slots.forEach((slot, index) => {
        const photo = this.uploadedPhotos[index];
        
        if (photo) {
          slot.innerHTML = `
            <div class="photo-preview">
              <img src="${photo.url}" alt="Photo ${index + 1}" loading="lazy">
              <div class="photo-overlay">
                <button class="remove-photo" data-index="${index}">√ó</button>
              </div>
            </div>
          `;
          
          // Add remove photo functionality
          const removeBtn = slot.querySelector('.remove-photo');
          removeBtn.addEventListener('click', (e) => {
            e.stopPropagation();
            this.removePhoto(index);
          });
        } else {
          slot.innerHTML = `
            <div class="photo-placeholder">
              <span class="slot-number">${index + 1}</span>
              <span class="upload-icon">+</span>
            </div>
          `;
        }
      });
    }

    removePhoto(index) {
      this.uploadedPhotos.splice(index, 1);
      this.updatePhotoGrid();
      this.updatePhotoCount();
      this.updateAddToCartButton();
    }

    updatePhotoCount() {
      const countElement = document.getElementById(`photo-count-${this.sectionId}`);
      if (countElement) {
        countElement.textContent = this.uploadedPhotos.length;
      }
    }

    updateAddToCartButton() {
      // Dispatch event for buy buttons to listen to
      const event = new CustomEvent('photoUploadUpdated', {
        detail: { photos: this.uploadedPhotos }
      });
      document.dispatchEvent(event);
    }

    getUploadedPhotos() {
      return this.uploadedPhotos;
    }

    showPostAddModal() {
      // This will be implemented in the modal section
      console.log('Show post-add modal');
    }
  }

  // Initialize when DOM is ready
  document.addEventListener('DOMContentLoaded', () => {
    const sectionId = '{{ section_id }}';
    if (!window.photoUploadManager) {
      window.photoUploadManager = new PhotoUploadManager(sectionId);
    }
  });
</script>
