{% comment %}
  Renders photo upload section with UploadCare integration.
  Accepts:
  - block: {Object} passing the block information.
  - product: {Object} product object.
  - section_id: {String} id of section to which this snippet belongs.

  Usage:
  {% render 'photo-upload-section', block: block, product: product, section_id: section.id %}
{% endcomment %}

{{ 'section-photo-upload.css' | asset_url | stylesheet_tag }}

<div class="photo-upload-section section-{{ section_id }}-padding gradient color-{{ block.settings.color_scheme | default: 'scheme-1' }}" {{ block.shopify_attributes }}>
  <div class="page-width">
    <div class="photo-upload-container">
      <div class="photo-upload-header">
        <h2 class="photo-upload-title">{{ block.settings.title | default: 'Upload Your Photos' }}</h2>
        <p class="photo-upload-description">{{ block.settings.description | default: 'Upload exactly 9 photos to create your custom photo magnets' }}</p>
      </div>

      <div class="photo-upload-content">
        <!-- Select Pictures Button -->
        <div class="select-pictures-container">
          <button class="select-pictures-btn" id="select-pictures-btn">
            SELECT PICTURES
          </button>
        </div>
      </div>
    </div>
  </div>
</div>



<script>
  class PhotoUploadManager {
    constructor(sectionId) {
      this.sectionId = sectionId;
      this.uploadedPhotos = [];
      this.maxPhotos = 9;
      this.modalUploader = null;
      this.isModalOpen = false;
      this.init();
    }

    init() {
      this.setupEventListeners();
      this.setupModal();
    }

    setupEventListeners() {
      // Select Pictures button
      const selectPicturesBtn = document.getElementById(`select-pictures-btn`);

      if (selectPicturesBtn) {
        selectPicturesBtn.addEventListener('click', () => {
          this.openModal();
        });
      }

      // Modal close buttons
      const modalClose = document.getElementById(`modal-close`);
       const modalCloseBottom = document.getElementById('modal-close-bottom');
      const previewClose = document.getElementById(`preview-close`);
      const modalOverlay = document.querySelector(`#photo-selection-modal .modal-overlay`);

      if (modalClose) {
        modalClose.addEventListener('click', () => this.closeModal());
      }
       if (modalCloseBottom) {
        modalCloseBottom.addEventListener('click', () => this.closeModal());
      }
      if (previewClose) {
        previewClose.addEventListener('click', () => this.closeModal());
      }
      if (modalOverlay) {
        modalOverlay.addEventListener('click', () => this.closeModal());
      }

      // Source selection
      const sourceOptions = document.querySelectorAll(`#photo-selection-modal .source-option`);
      sourceOptions.forEach(option => {
        option.addEventListener('click', () => {
          this.selectSource(option);
        });
      });

      // Add to cart button in modal
      const modalAddToCart = document.getElementById(`modal-add-to-cart`);
      if (modalAddToCart) {
        modalAddToCart.addEventListener('click', () => {
          this.addToCart();
        });
      }

      // Listen for cart updates
      document.addEventListener('cart:updated', () => {
        this.showPostAddModal();
      });
    }

    setupModal() {
      // Wait for UploadCare to load in modal
      this.waitForUploadCare().then(() => {
        this.setupModalUploadCare();
      });
    }

    waitForUploadCare() {
      return new Promise((resolve) => {
        const checkUploadCare = () => {
          if (window.UC && window.UC.defineComponents) {
            resolve();
          } else {
            setTimeout(checkUploadCare, 100);
          }
        };
        checkUploadCare();
      });
    }

    setupModalUploadCare() {
      // Get the modal uploader instance
      this.modalUploader = document.querySelector(`uc-file-uploader-regular[ctx-name="modal-photo-uploader"]`);
      
      if (this.modalUploader) {
        // Listen for file selection
        this.modalUploader.addEventListener('change', (event) => {
          this.handleFileSelection(event.detail);
        });

        // Listen for file upload progress
        this.modalUploader.addEventListener('progress', (event) => {
          this.handleUploadProgress(event.detail);
        });

        // Listen for file upload completion
        this.modalUploader.addEventListener('done', (event) => {
          this.handleUploadComplete(event.detail);
          this.renderDropGrid();
        });
      }
    }

    openModal() {
      const modal = document.getElementById(`photo-selection-modal`);
      console.log(modal);
      if (modal) {
        modal.style.display = 'flex';
        document.body.style.overflow = 'hidden';
        this.isModalOpen = true;
      }
    }

    closeModal() {
      const modal = document.getElementById(`photo-selection-modal`);
      if (modal) {
        modal.style.display = 'none';
        document.body.style.overflow = '';
        this.isModalOpen = false;
      }
    }

    selectSource(option) {
      // Remove active class from all options
      document.querySelectorAll(`#photo-selection-modal .source-option`).forEach(opt => {
        opt.classList.remove('active');
      });
      
      // Add active class to selected option
      option.classList.add('active');
      
      // Here you would implement different source handling
      console.log('Selected source:', option.dataset.source);
    }

    handleFileSelection(files) {
      console.log('Files selected:', files);
      // Reset photos array
      this.uploadedPhotos = [];
      this.updateSelectionCount();
      this.updateModalAddToCartButton();
    }

    handleUploadProgress(progress) {
      console.log('Upload progress:', progress);
    }

    handleUploadComplete(files) {
      console.log('Upload complete:', files);
      
      // Process uploaded files
      files.forEach((file, index) => {
        if (index < this.maxPhotos) {
          this.uploadedPhotos.push({
            id: file.uuid,
            url: file.cdnUrl,
            name: file.name,
            size: file.size
          });
        }
      });

      this.updatePreviewGrid();
      this.updateSelectionCount();
      this.updateModalAddToCartButton();
    }

    updatePreviewGrid() {
      const grid = document.getElementById(`preview-grid`);
      if (!grid) return;

      // Clear existing content
      grid.innerHTML = '';

      // Add preview thumbnails
      this.uploadedPhotos.forEach((photo, index) => {
        const thumbnail = document.createElement('div');
        thumbnail.className = 'preview-thumbnail';
        thumbnail.innerHTML = `
          <img src="${photo.url}" alt="Photo ${index + 1}" loading="lazy">
          <button class="remove-thumbnail" data-index="${index}">&times;</button>
        `;
        
        // Add remove functionality
        const removeBtn = thumbnail.querySelector('.remove-thumbnail');
        removeBtn.addEventListener('click', (e) => {
          e.stopPropagation();
          this.removePhoto(index);
        });
        
        grid.appendChild(thumbnail);
      });
    }

    removePhoto(index) {
      this.uploadedPhotos.splice(index, 1);
      this.updatePreviewGrid();
      this.updateSelectionCount();
      this.updateModalAddToCartButton();
    }

    updateSelectionCount() {
      const countElement = document.getElementById(`selection-count`);
      if (countElement) {
        countElement.textContent = `Selected ${this.uploadedPhotos.length} of ${this.maxPhotos}`;
      }
    }

    updateModalAddToCartButton() {
      const addToCartBtn = document.getElementById(`modal-add-to-cart`);
      const isComplete = this.uploadedPhotos.length === this.maxPhotos;
      
      if (addToCartBtn) {
        addToCartBtn.disabled = !isComplete;
        if (isComplete) {
          addToCartBtn.classList.remove('disabled');
        } else {
          addToCartBtn.classList.add('disabled');
        }
      }
    }

    addToCart() {
      if (this.uploadedPhotos.length === this.maxPhotos) {
        // Dispatch event for buy buttons to listen to
        const event = new CustomEvent('photoUploadUpdated', {
          detail: { photos: this.uploadedPhotos }
        });
        document.dispatchEvent(event);
        
        // Close modal after adding to cart
        this.closeModal();
      }
    }

    getUploadedPhotos() {
      return this.uploadedPhotos;
    }

    showPostAddModal() {
      // This will be implemented in the modal section
      console.log('Show post-add modal');
    }

    // Render 3x3 into the center drop area on the product modal
    renderDropGrid() {
      const dropGrid = document.getElementById('drop-grid');
      if (!dropGrid) return;
      if (this.uploadedPhotos.length !== this.maxPhotos) return;
      dropGrid.style.display = 'grid';
      dropGrid.innerHTML = '';
      this.uploadedPhotos.forEach((p) => {
        const cell = document.createElement('div');
        cell.className = 'cell';
        const img = document.createElement('img');
        img.src = p.url;
        img.alt = 'Uploaded photo';
        img.loading = 'lazy';
        cell.appendChild(img);
        dropGrid.appendChild(cell);
      });
    }
  }

  // Initialize when DOM is ready
  document.addEventListener('DOMContentLoaded', () => {
    const sectionId = '{{ section_id }}';
    if (!window.photoUploadManager) {
      window.photoUploadManager = new PhotoUploadManager(sectionId);
    }
  });
</script>
